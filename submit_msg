#!/usr/bin/env python2
def jobstring():
    ####################################################
    ####################################################
    #                 EDIT HERE                        #
    # The PBS header of the script that is submitted   #
    pbs="""
#$ -S /bin/bash
#$ -l h_vmem=3G
#$ -l h_rt=100:00:00
#$ -m as
#$ -M martin.bergemann@monash.edu
#$ -cwd
#
"""
#
# The modules to be loaded and the path var's      #
    modules="""
. /etc/profile
module load python/2.7.5
module load hdf5/1.8.7-gcc-4.5.3
module load netcdf-gfortran/4.2.0
#
#Export all paths we need
tmp=$(echo "$HOME/Software/lib/python2.7/site-packages:$PYTHONPATH")
tmp=$(echo "${tmp}:/opt/sw/python-2.7.5/lib/python2.7/site-packages/")
export PYTHONPATH=${tmp}:$HOME/Programming
export PATH=$HOME/Software/bin:$PATH
#
"""
    # The submit command for the batch system (qsub or llsubmit)
    # If you want to be emailed by the system, include these in job_string:
    #PBS -M your_email@address
    #PBS -m abe  # (a = abort, b = begin, e = end)
    submitcmd='qsub'
    return pbs,modules,submitcmd

##########################################################
#########################################################
# Example PBS cluster job submission in Python

import time,os,string,stat,sys
from datetime import datetime, timedelta as td
from Master.configdir import Config
import numpy as np
from run_cloudmodel import *




def main(fyear,lyear,itterator='--boxes=None',ad_vars=[],
        out=os.path.join(os.environ['HOME'],'jobs_smcm'),
        python='/opt/sw/python-2.7.5/bin/python',
        mpirun = '/opt/sw/openmpi-1.6.5/bin/mpirun'):
    
    
    pbs,modules,submitcmd = jobstring()
    if not os.path.isfile(python):
        for path in os.environ["PATH"].split(":"):
            if os.path.isfile(os.path.join(path,'python')):
                python = os.path.join(path,'python')
    
    if not os.path.isfile(mpirun):
        for path in os.environ["PATH"].split(":"):
            if os.path.isfile(os.path.join(path,'mpirun')):
                mpirun = os.path.join(path,'mpirun')
    
#    python = mpirun+' -np 32 '+python

    if not fyear.startswith('--'):
        fyear = '--start=%s'%fyear
    if not lyear.startswith('--'):
        lyear = '--end=%s'%lyear

    #if not os.path.isdir(os.path.join(out,'error')):
    #    os.makedirs(os.path.join(out,'error'))
    #if not os.path.isdir(os.path.join(out,'output')):
    #    os.makedirs(os.path.join(out,'output'))

    for i in itterator:
        # Open a pipe to the qsub command.
        #Edit: opening a STDIN pipe with os.popen and pip
        #the entry to qsub doesn't work here 
        #Therefore a tmp-script is created that will be executed
        script = os.path.join(os.environ['HOME'],'tmp.sh')
        output = open(script,'w')
     
        # Customize your options here
        if len(ad_vars):
            Config='"%s %s %s %s"' %(fyear,lyear,i,' '.join(ad_vars))
        else:
            Config='"%s %s %s"' %(fyear,lyear,i)
        f=fyear.split('=')[-1]
        l=lyear.split('=')[-1]
        v=i.split('=')[-1].split(',')[0]
        job_name = "smcm_%s_%s_%s" %(v,f,l)
        command =os.path.abspath(\
                os.path.join(os.path.dirname(__file__),'run_cloudmodel.py'))
        sys.stdout.flush()
        sys.stdout.write('Submitting script for %s %s\n'\
                %(command,Config.replace('"','')))
        job_string = """#!/bin/bash
#
%s
#$ -o %s/%s.out
#$ -e %s/%s.err
#$ -N %s
#Make module available
%s
export PYTHONDONTWRITEBYTECODE=True
#Run the Script
#
config=%s
script="%s"
cmd="$script $config"
$cmd
    """   % (pbs, out, job_name,out, job_name,job_name,modules,Config,\
            python+' '+command)
        #Write job_string to script and close it
        output.write(job_string)
        output.close()
        #Make script executables
        os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)
        #Send script to cluster with qsub and delete it
        os.system('%s %s 1> /dev/null' %(submitcmd,script))
        
        os.remove(script)
        # Print your job and the response to the screen
        time.sleep(0.1)







if __name__ == '__main__':
    out=os.path.join(os.environ['HOME'],'jobs_smcm')
    kwargs = kw()
    helpstring='''submit v1.0 Martin Bergemann 13 Jan 2015
    Copyrith (c) 2013 through 2015, Martin Bergemann
    submit comes with ABSOLUTELY NO WARRANTY; for details type submit -w



    Usage:
    submit startdate enddate [options]

    Dates:
          The dates representing the start and end dates for the download
          the format of the dates must be YYYY-MM-DD


    Options:
          --out:     the directory name where the std-out and std-err should be
                     written to [default %s]
          --w:       print the copying policy
          all other keywords variables are passed to the script, the variables are:
        Variables:
            start (str)     : The start of the integration (dafualt %s)
            end   (str)     : The end of the integration (default %s)
            boxes   (list)  : The name of the boxes that are considered (default %s)
            J0  (nd-array)  : The interaction potential (default %s)
            num (int)       : The number of jobs to be submitted (mpi like stuff)

    Example:
        The comand
        submit 1998-01-01 1998-01-02  --boxes=coast_03 --
        submits a job for running the cloud model from 1st to 2nd of Jan 199 in the
        boxes coast_03
    '''%(
            out,
            str(kwargs['end']),
            str(kwargs['end']),
            str(kwargs['boxes']),
            str(kwargs['J0']))


    if len(sys.argv) < 2:
        sys.exit(helpstring)
    years=sys.argv[1:3]
    ad_vars = [] #Additional variables to be passed to run_cloudmodel
    itterator='--boxes=None'
    try:
        for arg in sys.argv[3:]:
            if arg.lower().startswith('--h') or arg.lower().startswith('-h'):
                sys.exit(helpstring)
            elif arg.lower().startswith('-w') or arg.lower().startswith('-w'):
                l=open('LICENSE').read().replace('XXX','submit')
                sys.stdout.flush()
                sys.stdout.write(l+'\n')
                sys.exit()
            elif arg.lower().startswith('--out') or arg.lower().startswith('-o'):
                out=arg.split('=')[-1]
            else:
                if arg.lower().startswith('--rank'):
                    rank=int(arg.lower().split('=')[-1])
                    itterator=['--rank=%i'%i for i in xrange(rank)]
                    ad_vars.append('--size=%i'%(rank))
                elif arg.lower().startswith('--boxes'):
                    itterator=['--boxes=%s'%(i) for i in arg.split('=')[-1].split(',')]
                else:
                    ad_vars.append(arg)
    except IndexError:
        pass
    if  len(years) == 2:
        fyear = '--start=%s'%years[0]
        lyear = '--end=%s'%years[-1]
    else:
        sys.exit(helpstring)
    main(fyear,lyear,itterator=itterator,ad_vars=ad_vars,out=out)

